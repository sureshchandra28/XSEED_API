{
	"info": {
		"_postman_id": "e82063c2-8b1b-48e5-8e96-22786a575b5b",
		"name": "Create a Standard Lesson Plan Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login Library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
									"const responseJSON=pm.response.json();\r",
									"pm.environment.set(\"blockMapId\",298);\r",
									"//pm.environment.set(\"bID\",\"TTCBEN1632032834700\");\r",
									"pm.test(\"Verifying Login\",()=>{\r",
									"    pm.expect(responseJSON.message).to.eql(\"Logged in\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "user_platform",
								"value": "web",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"kaushik.sundar+automator1@xseededucation.com\",\r\n\"password\":\"xseed123\",\r\n\"referrer\":\"library.xseeddigital.info\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://accounts-api.xseeddigital.info/api/login",
							"protocol": "https",
							"host": [
								"accounts-api",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login CES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"cesToken\", jsonData.token);\r",
									"const responseJSON=pm.response.json();\r",
									"\r",
									"pm.test(\"Verifying Login\",()=>{\r",
									"    pm.expect(responseJSON.message).to.eql(\"Logged in\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "user_platform",
								"value": "web",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\":\"kaushik.sundar+automator@xseededucation.com\",\r\n\"password\":\"xseed123\",\r\n\"referrer\":\"library.xseeddigital.info\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://accounts-api.xseeddigital.info/api/login",
							"protocol": "https",
							"host": [
								"accounts-api",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Library",
			"item": [
				{
					"name": "Get Subject",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var subjectList = pm.response.json().data.subjects\r",
									"for(i = 0; i < subjectList.length; i++) {\r",
									"    if (subjectList[i].name == \"English\") {\r",
									"        pm.environment.set(\"subjectID\", subjectList[i].id)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n  subjects{\r\n        id\r\n        name\r\n    }\r\n}\r\n\r\n  \r\n\r\n  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Boards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// var boardList = pm.response.json().data.boards\r",
									"// for(i = 0; i < boardList.length; i++) {\r",
									"//     if (boardList[i].name == \"XSEED One India\") {\r",
									"//         pm.environment.set(\"boardID\", boardList[i].id)\r",
									"//         pm.environment.set(\"boardName\", boardList[i].name)\r",
									"//     }\r",
									"// }\r",
									"// pm.test(\"verify 200 status code\",()=>{\r",
									"//     pm.response.to.be.ok;\r",
									"//     pm.expect(pm.response.code).to.eql(200);\r",
									"// });\r",
									" pm.environment.set(\"boardName\", \"Test XSEED One India\");\r",
									" pm.environment.set(\"boardID\", \"74\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n  boards{\r\n        id\r\n        name\r\n    }\r\n}\r\n\r\n  ",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var productList = pm.response.json().data.products\r",
									"for(i = 0; i < productList.length; i++) {\r",
									"    if (productList[i].name == \"XSEED One\") {\r",
									"        pm.environment.set(\"productID\", productList[i].id)    \r",
									"    }\r",
									"}\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n  products{\r\n        id\r\n        name\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Standard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var standardList = pm.response.json().data.standards\r",
									"for(i = 0; i < standardList.length; i++) {\r",
									"    if (standardList[i].name == \"1\") {\r",
									"        pm.environment.set(\"standardID\", standardList[i].id)    \r",
									"    }\r",
									"}\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n  standards{\r\n        id\r\n        name\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Block Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var jsonData=JSON.parse(responseBody);\r",
									"// postman.setEnvironmentVariable(\"blockMapId\",jsonData.data.createBlockMap.id);\r",
									"// pm.environment.set(\"stAlBlockTitle\",\"standalone Block Test_\"+Date.now());\r",
									"\r",
									"// pm.test(\"Verify Created Block Map\",()=>{\r",
									"//     pm.expect(jsonData.data.createBlockMap.id).to.eql(pm.environment.get(\"blockMapId\"));\r",
									"// });\r",
									"\r",
									"// pm.test(\"verify 200 status code\",()=>{\r",
									"//     pm.response.to.be.ok;\r",
									"//     pm.expect(pm.response.code).to.eql(200);\r",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// postman.setEnvironmentVariable(\"bmName\",\"BlockMapTest_\"+Date.now());\r",
									"// postman.setEnvironmentVariable(\"bID\",\"TTCBEN\"+Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# mutation {\r\n#   createBlockMap(blockMap: {name: \"{{bmName}}\", productId: {{productID}}, boardId: {{boardID}}, subjectId: {{subjectID}}, standardId: {{standardID}}}) {\r\n#     id\r\n#     name\r\n#     product {\r\n#       id\r\n#       name\r\n#     }\r\n#     board {\r\n#       id\r\n#       name\r\n#     }\r\n#     subject {\r\n#       id\r\n#       name\r\n#       shortName\r\n#     }\r\n#     standard {\r\n#       id\r\n#       name\r\n#       displayName\r\n#     }\r\n#   }\r\n# }",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Texts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var textList = pm.response.json().data.texts\r",
									"for(i = 0; i < textList.length; i++) {\r",
									"    if (textList[i].text == \"My Balloon\") {\r",
									"        pm.environment.set(\"textID\", textList[i].id)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n    texts{\r\n        id\r\n        text\r\n        author\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Skills & SubSkills",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var skillsList=pm.response.json().data.skills\r",
									"for(var i=0;i<skillsList.length;i++){\r",
									"    if(skillsList[i].name==\"Expressing\"){\r",
									"        pm.environment.set(\"skillID\", skillsList[i].id)   \r",
									"    }\r",
									"}\r",
									"var subSkillsList=pm.response.json().data.subSkills\r",
									"for(var i=0;i<subSkillsList.length;i++){\r",
									"    if(subSkillsList[i].name==\"Reading\"){\r",
									"        pm.environment.set(\"subSkillID\", subSkillsList[i].id)   \r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query{\r\n  skills{\r\n        id\r\n        name\r\n    }\r\n    subSkills{\r\n      id\r\n      name\r\n    }\r\n  }\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Standalone Block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"linkBlockId\",jsonData.data.createBlock.id);\r",
									"\r",
									"pm.test(\"verify Created Standalone title\",()=>{\r",
									"    pm.expect(pm.response.json().data.createBlock.title).to.eql(pm.environment.get(\"stAlBlockTitle\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify Created Standalone bId\",()=>{\r",
									"    pm.expect(pm.response.json().data.createBlock.bId).to.eql(pm.environment.get(\"bID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify Created Standalone type\",()=>{\r",
									"    pm.expect(pm.response.json().data.createBlock.type).to.eql(\"standalone\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"stAlBlockTitle\",\"standalone_block_test_\"+Date.now());\r",
									"postman.setEnvironmentVariable(\"bID\",\"TTCBEN\"+Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  createBlock(block: {title: \"{{stAlBlockTitle}}\", type: \"standalone\", bId: \"{{bID}}\", skillId: null, subSkillId: null, textId: \"0\", bigIdea: \"\", childrenType: \"LessonPlan\", linkedBlockIds: [], showInXseedOne: true}) {\r\n        id\r\n        title\r\n        bId\r\n        text {\r\n            id\r\n            text\r\n        }\r\n        bigIdea\r\n        type\r\n        skill {\r\n            id\r\n            name\r\n        }\r\n        subSkill {\r\n            id\r\n            name\r\n        }\r\n        linkedBlockIds\r\n        showInXseedOne\r\n    }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Block Sequence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"var noOfBlocks=jsonData.data.blockMap.blocks.length;\r",
									"pm.environment.set(\"blockSequence\",(jsonData.data.blockMap.blocks[noOfBlocks-1].displaySequence)+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($id:ID!){\r\n  blockMap(id:$id){\r\n    id\r\n    name\r\n    blocks{\r\n      displaySequence\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"id\": {{blockMapId}}\r\n}"
							}
						},
						"url": {
							"raw": "http://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "http",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link Block To BlockMap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify link block to block map\",()=>{\r",
									"    pm.expect(pm.response.json().data.linkBlockToBlockMap.blockMapId).contains(pm.environment.get(\"blockMapId\"));\r",
									"    pm.expect(pm.response.json().data.linkBlockToBlockMap.blockId).to.eql(pm.environment.get(\"linkBlockId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  linkBlockToBlockMap(data: {blockMapId: {{blockMapId}}, blockId: {{linkBlockId}}, sequence: {{blockSequence}}, displaySequence: {{blockSequence}}, quarter: 1}) {\r\n    sequence\r\n    displaySequence\r\n    blockId\r\n    blockMapId\r\n    quarter\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sequence ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"sequenceId\", (jsonData.data.block.lessonPlans.length +1));\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ($id:ID!) {\r\n    block(id:$id){\r\n        title \r\n        lessonPlans\r\n            {\r\n        sequence\r\n        }\r\n    }\r\n}",
								"variables": "{\r\n    \"id\":{{linkBlockId}}\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Standard Lesson Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"var id=jsonData.data.createLessonPlan.id;\r",
									"postman.setEnvironmentVariable(\"createdLpId\", id);\r",
									"\r",
									"pm.test(\"Verifying Adding Lesson Name\",() =>{\r",
									"    pm.expect(pm.response.json().data.createLessonPlan.name).to.eql(pm.environment.get(\"lpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"postman.setEnvironmentVariable(\"lpName\", \"TestAuto_\"+Date.now());\r",
									"postman.setEnvironmentVariable(\"desc\",\"Description_\"+Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  createLessonPlan(lessonPlan: {name: \"{{lpName}}\", description: \"{{desc}}\", type: \"standard\"}) {\r\n        id\r\n        name\r\n        description\r\n        type\r\n    }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Link lesson Plan to created block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"verify Link Lesson Plan to Created Block\",()=>{\r",
									"    pm.expect(jsonData.data.linkLessonPlanToBlock.blockId).to.eql(pm.environment.get(\"linkBlockId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n    linkLessonPlanToBlock(data: \r\n    {blockId: {{linkBlockId}}, lessonPlanId: \"{{createdLpId}}\", sequence: {{sequenceId}}, displaySequence: {{sequenceId}}\r\n    }) \r\n    {\r\n        blockId\r\n        sequence\r\n        displaySequence\r\n        lessonPlanId\r\n    }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CES",
			"item": [
				{
					"name": "Get Available Block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"blockList=jsonData.data.getAvailableBlocksOnStandardSubjectBoardProductComboForProjectCreation;\r",
									"for(i = 0; i < blockList.length; i++) {\r",
									"    if (blockList[i].title == pm.environment.get(\"stAlBlockTitle\")) {\r",
									"        pm.environment.set(\"availBlockID\", blockList[i].id)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"verify Available Block\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  getAvailableBlocksOnStandardSubjectBoardProductComboForProjectCreation(boardName: \"{{boardName}}\", subjectId: {{subjectID}}, standardId: {{standardID}}, productId: {{productID}}) {\r\n        id\r\n        title\r\n        bId\r\n        childrenType\r\n        sequence\r\n            lessonPlans {\r\n            id\r\n            name\r\n        }\r\n        dailyPlans {\r\n            id\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"createdProjectId\", jsonData.data.createProject.id);\r",
									"postman.setEnvironmentVariable(\"createdProjectName\", jsonData.data.createProject.name);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify lpName\",()=>{\r",
									"    pm.expect(jsonData.data.createProject.name).to.eql(pm.environment.get(\"lpName\"));\r",
									"});\r",
									"\r",
									"pm.test(\"verify product id\",()=>{\r",
									"    pm.expect(jsonData.data.createProject.product.id).to.eql(pm.environment.get(\"productID\"));   \r",
									"});\r",
									"\r",
									"pm.test(\"verify board id\",()=>{\r",
									"    pm.expect(jsonData.data.createProject.board.id).to.eql(pm.environment.get(\"boardID\"));    \r",
									"});\r",
									"\r",
									"pm.test(\"verify  subject id\",()=>{\r",
									"    pm.expect(jsonData.data.createProject.subject.id).to.eql(pm.environment.get(\"subjectID\"));    \r",
									"});\r",
									"\r",
									"pm.test(\"verify standard id\",()=>{\r",
									"    pm.expect(jsonData.data.createProject.standard.id).to.eql(pm.environment.get(\"standardID\"));    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createProject($input: ProjectCreateInputType!) {\r\n  createProject(input: $input) {\r\n        id\r\n        name\r\n        workflowStatus\r\n        product {\r\n            id\r\n            name\r\n        }\r\n        board {\r\n            id\r\n            name\r\n        }\r\n        standard {\r\n            id\r\n            name\r\n            displayName\r\n        }\r\n        subject {\r\n            id\r\n            name\r\n        }\r\n        block {\r\n            id\r\n            bId\r\n            title\r\n            childrenType\r\n        }\r\n        contents {\r\n            id\r\n            library_id\r\n            name\r\n            type\r\n            template\r\n            currentStage\r\n        }\r\n        dailyPlans {\r\n            id\r\n            library_id\r\n            name\r\n            type\r\n            currentStage\r\n        }\r\n        assignees {\r\n            author {\r\n                id\r\n                name\r\n            }\r\n            reviewer1 {\r\n                id\r\n                name\r\n            }\r\n            reviewer2 {\r\n                id\r\n                name\r\n            }\r\n            academicSignOff {\r\n                id\r\n                name\r\n            }\r\n            editor {\r\n                id\r\n                name\r\n            }\r\n            visualizer {\r\n                id\r\n                name\r\n            }\r\n            assetUploader {\r\n                id\r\n                name\r\n            }\r\n            assetAuthorizer {\r\n                id\r\n                name\r\n            }\r\n            proofReader {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"name\": \"{{lpName}}\",\r\n    \"boardId\": {{boardID}},\r\n    \"subjectId\": {{subjectID}},\r\n    \"standardId\": {{standardID}},\r\n    \"productId\": {{productID}},\r\n    \"entityId\": {{linkBlockId}},\r\n    \"entityType\": \"Block\",\r\n    \"type\": \"LessonPlan\",\r\n    \"childrenEntityIds\": [\r\n      {{createdLpId}}\r\n    ],\r\n    \"assignees\": {\r\n      \"author\": \"skip\",\r\n      \"reviewer1\": \"skip\",\r\n      \"reviewer2\": \"skip\",\r\n      \"academicSignOff\": \"skip\",\r\n      \"editor\": \"615339ab43a5ff0011f4ed64\",\r\n      \"visualizer\": \"615339ab43a5ff0011f4ed64\",\r\n      \"assetUploader\": \"615339ab43a5ff0011f4ed64\",\r\n      \"assetAuthorizer\": \"615339ab43a5ff0011f4ed64\",\r\n      \"proofReader\": \"615339ab43a5ff0011f4ed64\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Cover Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"coverImageDataId\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded Image\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"StudentCoverPhoto\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/StudentCoverPhoto.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Content Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"contentBookDataId\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded Content Book\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"worksheet1\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/worksheet1.pdf"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Work Sheet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"workSheetDataId\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded WorkSheet\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"worksheet1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/worksheet1.pdf"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload 1st Title Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"firstTitleID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify First Title Image Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"firstTitle\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/firstTitle.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload 2nd Title image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"secondTitleID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Second Title Image Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"secondTitle\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/secondTitle.png"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload 3rd Title Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"thirdTitleID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Third Title Image Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"thirdTitle\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/thirdTitle.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Class Work Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"classWorkDataID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded Class Work Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"classWork\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/classWork.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload HomeWork Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"homeWorkDataID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded Home Work Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"homework\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/homework.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload HomeWorkQuestion_Answered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"hmQueAnsDataID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded HomeWork Queston Answered Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"Question_Answer\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/Question_Answer.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload ClassWorkQuestion_Answered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"cwQueAnsDataID\",jsonData.data._id);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Uploaded ClassWork Queston Answered Data\",()=>{\r",
									"    pm.expect(jsonData.data.data.original).contains(\"Question_Answer\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://ces.xseeddigital.info/",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "preset",
									"value": "question",
									"type": "text"
								},
								{
									"key": "appName",
									"value": "content_entry_frontend",
									"type": "text"
								},
								{
									"key": "assets",
									"type": "file",
									"src": "src/resources/assets/Question_Answer.jpg"
								}
							]
						},
						"url": {
							"raw": "https://xseed-rest-gateway.xseeddigital.info/api/upload",
							"protocol": "https",
							"host": [
								"xseed-rest-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project LessonPlan Current Stage Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"var actDiscExp= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.activity_discussion.explanations[0]._id;\r",
									"pm.environment.set(\"actDiscExpID\", actDiscExp)\r",
									"\r",
									"var ActDiscInst= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.activity_discussion.instructions[0]._id;\r",
									"pm.environment.set(\"ActDiscInstID\", ActDiscInst)\r",
									"\r",
									"var genDiscExp= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.generalized_discussion.explanations[0]._id;\r",
									"pm.environment.set(\"genDiscExpID\", genDiscExp)\r",
									"\r",
									"var genDiscInst= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.generalized_discussion.instructions[0]._id;\r",
									"pm.environment.set(\"genDiscInstID\", genDiscInst)\r",
									"\r",
									"var highOrdThiExp= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.higher_order_thinking.explanations[0]._id;\r",
									"pm.environment.set(\"highOrdThiExpID\", highOrdThiExp)\r",
									"\r",
									"var highOrdThiInst= jsonData.data.projectLessonPlanCurrentStageData.currentStageData.data.analysis.higher_order_thinking.instructions[0]._id;\r",
									"pm.environment.set(\"highOrdThiInstID\", highOrdThiInst)\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify project Lesson Plan Current Stage Data\",()=>{\r",
									"    pm.expect(pm.response.json().data.projectLessonPlanCurrentStageData.currentStage).to.eql(\"editingStage\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  projectLessonPlanCurrentStageData(projectId: \"{{createdProjectId}}\", contentLibraryId: \"{{createdLpId}}\") {\r\n    currentStage\r\n    name\r\n    library_id\r\n    subjectName\r\n    type\r\n    subject {\r\n      id\r\n      name\r\n    }\r\n    commentsCount {\r\n      aim\r\n      action\r\n      analysis\r\n      application\r\n      assessment\r\n      summary\r\n    }\r\n    dailyPlan {\r\n      name\r\n      correspondingTimeData {\r\n        status\r\n        summary\r\n      }\r\n    }\r\n    currentStageAssetsSignedUrl\r\n    currentStageData {\r\n      validationStatus\r\n      createdAt\r\n      updatedAt\r\n      equationEditorJsonArray {\r\n        latex\r\n        json\r\n      }\r\n      data\r\n    }\r\n    diff\r\n  }\r\n  lessonPlanStaticTextsData(type: \"SchoolLessonPlan\", template: \"standard\")\r\n  lessonPlansWithMicroTopics(ids: [{{createdLpId}}]) {\r\n    id\r\n    name\r\n    type\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save  ProjectLP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"let actDisExpDesBrTxt=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.explanations[0].brief.text;\r",
									"pm.test(\"Verify Activity Discusson Explanation Description brief text \",()=>{\r",
									"    const sp=actDisExpDesBrTxt.split('\"\"','\"');\r",
									"    for(var i=0;i<sp.length;i++){\r",
									"        if(sp[i]==(\"This is ABCD image\")){\r",
									"            pm.expect(actDisExpDes).to.eql(\"This is ABCD image\");\r",
									"        }\r",
									"    }  \r",
									"});\r",
									"\r",
									"let actDisExpDeskeyQues=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.key_question;\r",
									"pm.test(\"Verify Activity Discusson Explanation Description Key Questoin  \",()=>{\r",
									"    pm.expect(actDisExpDeskeyQues).contains(\"this is an activity discussion key questions.\");\r",
									"});\r",
									"\r",
									"\r",
									"let actDisExpDeskeyQuescGuide=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.key_question_guide;\r",
									"pm.test(\"Verify Activity Discusson Explanation Description Key Questoin Guide \",()=>{\r",
									"    pm.expect(actDisExpDeskeyQuescGuide).contains(\"This is an activity discussion  key question guide\");\r",
									"});\r",
									"\r",
									"let actInstruction=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.instructions[0].description;\r",
									"pm.test(\"Verify Activity Disccusion instructions \",()=>{\r",
									"    pm.expect(actInstruction).contains(\"This is an activity explanation text box\");\r",
									"});\r",
									"\r",
									"let actTeacherTip=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.teacher_tip;\r",
									"pm.test(\"Verify Activity Discussion Teacher Tip \",()=>{\r",
									"    pm.expect(actTeacherTip).contains(\"This is Teacher Tip\");\r",
									"});\r",
									"\r",
									"let genTeacherTip=jsonData.data.saveProjectLessonPlanStageData.analysis.generalized_discussion.teacher_tip;\r",
									"pm.test(\"Verify Generalized Discussion Teacher Tip \",()=>{\r",
									"    pm.expect(genTeacherTip).contains(\"This is a Teacher Tip\");\r",
									"});\r",
									"\r",
									"let higherOrdTeacherTip=jsonData.data.saveProjectLessonPlanStageData.analysis.higher_order_thinking.teacher_tip;\r",
									"pm.test(\"Verify Higher Order Thinking Teacher Tip \",()=>{\r",
									"    pm.expect(higherOrdTeacherTip).contains(\"This is the Teacher Tip\");\r",
									"});\r",
									"\r",
									"let types=jsonData.data.saveProjectLessonPlanStageData.analysis.types;\r",
									"pm.test(\"Verify Types \",()=>{\r",
									"    pm.expect(types).contains(\"pair\");\r",
									"});\r",
									"\r",
									"let summary=jsonData.data.saveProjectLessonPlanStageData.analysis.summary;\r",
									"pm.test(\"Verify Analysis summary \",()=>{\r",
									"    pm.expect(summary).contains(\"This is an Analysis summary\");\r",
									"});\r",
									"\r",
									"let actSummary=jsonData.data.saveProjectLessonPlanStageData.action.summary;\r",
									"pm.test(\"Verify action summary \",()=>{\r",
									"    pm.expect(actSummary).contains(\"This is an Action summary\");\r",
									"});\r",
									"\r",
									"let classWrkSummary=jsonData.data.saveProjectLessonPlanStageData.application.summaryData.classwork;\r",
									"pm.test(\"Verify Class Work summary \",()=>{\r",
									"    pm.expect(classWrkSummary).contains(\"This is a Classwork\");\r",
									"});\r",
									"\r",
									"let homeWrkSummary=jsonData.data.saveProjectLessonPlanStageData.application.summaryData.homework;\r",
									"pm.test(\"Verify Home Work summary \",()=>{\r",
									"    pm.expect(homeWrkSummary).contains(\"This is a homework\");\r",
									"});\r",
									"\r",
									"var actDisExpDes=jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.explanations[0].description;\r",
									"pm.test(\"Verify Activity Discusson Explanation Description Title Text \",()=>{\r",
									"    pm.expect(actDisExpDes).to.eql(\"This is 1st Title\");\r",
									"});\r",
									"\r",
									"var genDisExpDes=jsonData.data.saveProjectLessonPlanStageData.analysis.generalized_discussion.explanations[0].description;\r",
									"pm.test(\"Verify Generalized Discussion Title Text \",()=>{\r",
									"    pm.expect(genDisExpDes).to.eql(\"This is the 2nd Title\");\r",
									"});\r",
									"\r",
									"var higOrdThinking=jsonData.data.saveProjectLessonPlanStageData.analysis.higher_order_thinking.explanations[0].description;\r",
									"pm.test(\"Verify Higher order Thinking Title Text \",()=>{\r",
									"    pm.expect(higOrdThinking).to.eql(\"This is the 3rd Title\");\r",
									"});\r",
									"\r",
									"let totalTime=jsonData.data.saveProjectLessonPlanStageData.time;\r",
									"pm.test(\"Verify Total Time \",()=>{\r",
									"    pm.expect(totalTime).contains(\"35 mins\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 1st Title AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.analysis.activity_discussion.explanations[0].brief.assetId).to.eql(pm.environment.get(\"firstTitleID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 2nd Title AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.analysis.generalized_discussion.explanations[0].brief.assetId).to.eql(pm.environment.get(\"secondTitleID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 3rd Title AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.\r",
									"    saveProjectLessonPlanStageData.analysis.higher_order_thinking.explanations[0].brief.assetId).to.eql(pm.environment.get(\"thirdTitleID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Cover Image AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.brief.assetId).to.eql(pm.environment.get(\"coverImageDataId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify content Book AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.aim.resources[0].assetId).to.eql(pm.environment.get(\"contentBookDataId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Worksheet AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.aim.resources[1].assetId).to.eql(pm.environment.get(\"workSheetDataId\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Classwork AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.application.classwork.brief.assetId).to.eql(pm.environment.get(\"classWorkDataID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Homework Question AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.application.homework.question.assetId).to.eql(pm.environment.get(\"homeWorkDataID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Homework Question Answer AssetId  \",()=>{\r",
									"    pm.expect(jsonData.data.saveProjectLessonPlanStageData.application.homework.question_answer.brief.assetId).to.eql(pm.environment.get(\"hmQueAnsDataID\"));\r",
									"});\r",
									"\r",
									"let assessmentSummaryAp=jsonData.data.saveProjectLessonPlanStageData.assessment.summaryData.approaching;\r",
									"pm.test(\"Verify Assessment Summary Approach \",()=>{\r",
									"    pm.expect(assessmentSummaryAp).contains(\"This is assessment approaching\");\r",
									"});\r",
									"\r",
									"let assessmentSummarymeet=jsonData.data.saveProjectLessonPlanStageData.assessment.summaryData.meeting;\r",
									"pm.test(\"Verify Assessment Summary Meeting \",()=>{\r",
									"    pm.expect(assessmentSummarymeet).contains(\"This is for Meeting\");\r",
									"});\r",
									"\r",
									"let assessmentSummaryExceed=jsonData.data.saveProjectLessonPlanStageData.assessment.summaryData.exceeding;\r",
									"pm.test(\"Verify Assessment Summary Exceeding \",()=>{\r",
									"    pm.expect(assessmentSummaryExceed).contains(\"This is for Exceeding\");\r",
									"});\r",
									"\r",
									"let assessmentChkQues=jsonData.data.saveProjectLessonPlanStageData.assessment.check.question.brief.text;\r",
									"pm.test(\"Verify Assessment Check Question Text \",()=>{\r",
									"    pm.expect(assessmentChkQues).contains(\"Practice of A B C D word.\");\r",
									"});\r",
									"\r",
									"let assessmentChkQuesAns=jsonData.data.saveProjectLessonPlanStageData.assessment.check.question_answer.brief.text;\r",
									"pm.test(\"Verify Assessment Check Question Ansewer Text \",()=>{\r",
									"    pm.expect(assessmentChkQuesAns).contains(\"This is the worksheet answered file\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($projectId: ID!, $lessonPlanLibraryId: ID!, $data: JSON!,         $equationEditorJsonArray: [EquationEditorJsonInput]!) {\r\n  saveProjectLessonPlanStageData(projectId: $projectId, contentLibraryId: $lessonPlanLibraryId, data: $data, equationEditorJsonArray: $equationEditorJsonArray)\r\n}\r\n",
								"variables": "{\r\n  \"lessonPlanLibraryId\": \"{{createdLpId}}\",\r\n  \"projectId\": \"{{createdProjectId}}\",\r\n  \"data\": {\r\n    \"analysis\": {\r\n      \"activity_discussion\": {\r\n        \"explanations\": [\r\n          {\r\n            \"_id\": \"{{actDiscExpID}}\",\r\n            \"description\": \"This is 1st Title\",\r\n            \"assetId\": \"{{firstTitleID}}\",\r\n            \"brief\": {\r\n              \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is ABCD image\\\"}]}]}\",\r\n              \"assetId\": \"{{firstTitleID}}\"\r\n            },\r\n            \"assetApproved\": true\r\n          }\r\n        ],\r\n        \"key_question\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"this is an activity discussion key questions.\\\"}]}]}\",\r\n        \"key_question_guide\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an activity discussion  key question guide\\\"}]}]}\",\r\n        \"instructions\": [\r\n          {\r\n            \"_id\": \"{{ActDiscInstID}}\",\r\n            \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an activity explanation text box\\\"}]}]}\"\r\n          }\r\n        ],\r\n        \"teacher_tip\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is Teacher Tip\\\"}]}]}\",\r\n        \"key_question_assets\": []\r\n      },\r\n      \"generalized_discussion\": {\r\n        \"explanations\": [\r\n          {\r\n            \"_id\": \"{{genDiscExpID}}\",\r\n            \"description\": \"This is the 2nd Title\",\r\n            \"assetId\": \"{{secondTitleID}}\",\r\n            \"brief\": {\r\n              \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Reading book image\\\"}]}]}\",\r\n              \"assetId\": \"{{secondTitleID}}\"\r\n            },\r\n            \"assetApproved\": true\r\n          }\r\n        ],\r\n        \"key_question\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a  generalized discussion key question\\\"}]}]}\",\r\n        \"key_question_guide\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a  generalized discussion key guide\\\"}]}]}\",\r\n        \"instructions\": [\r\n          {\r\n            \"_id\": \"{{genDiscInstID}}\",\r\n            \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a  generalized Explanation text box\\\"}]}]}\"\r\n          }\r\n        ],\r\n        \"teacher_tip\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a Teacher Tip\\\"}]}]}\",\r\n        \"key_question_assets\": []\r\n      },\r\n      \"higher_order_thinking\": {\r\n        \"explanations\": [\r\n          {\r\n            \"_id\": \"{{highOrdThiExpID}}\",\r\n            \"description\": \"This is the 3rd Title\",\r\n            \"assetId\": \"{{thirdTitleID}}\",\r\n            \"brief\": {\r\n              \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Books images\\\"}]}]}\",\r\n              \"assetId\": \"{{thirdTitleID}}\"\r\n            },\r\n            \"assetApproved\": true\r\n          }\r\n        ],\r\n        \"key_question\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a higher order thinking key question\\\"}]}]}\",\r\n        \"key_question_guide\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a higher order thinking key question guide\\\"}]}]}\",\r\n        \"instructions\": [\r\n          {\r\n            \"_id\": \"{{highOrdThiInstID}}\",\r\n            \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a higher order thinking HOTS explanation\\\"}]}]}\"\r\n          }\r\n        ],\r\n        \"teacher_tip\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the Teacher Tip\\\"}]}]}\",\r\n        \"key_question_assets\": []\r\n      },\r\n      \"types\": [\r\n        \"pair\"\r\n      ],\r\n      \"summary\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an Analysis summary\\\"}]}]}\",\r\n      \"time\": \"10 mins\",\r\n      \"type\": \"\"\r\n    },\r\n    \"action\": {\r\n      \"types\": [\r\n        \"pair\"\r\n      ],\r\n      \"summary\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an Action summary\\\"}]}]}\",\r\n      \"time\": \"15 mins\",\r\n      \"type\": \"\",\r\n      \"instructions\": [\r\n        {\r\n          \"instructionBreak\": false,\r\n          \"_id\": \"6139acaa84bde30011c9a75b\",\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an action step description\\\"}]}]}\",\r\n          \"children\": [],\r\n          \"assets\": []\r\n        }\r\n      ],\r\n      \"teacher_tip\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an action teacher tip description\\\"}]}]}\"\r\n    },\r\n    \"application\": {\r\n      \"classwork\": {\r\n        \"brief\": {\r\n          \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"A B Word Practices\\\"}]}]}\",\r\n          \"assetId\": \"{{classWorkDataID}}\",\r\n          \"type\": \"image\"\r\n        },\r\n        \"description\": \"1\",\r\n        \"assetId\": \"{{classWorkDataID}}\",\r\n        \"assetApproved\": true,\r\n        \"type\": \"image\"\r\n      },\r\n      \"homework\": {\r\n        \"question\": {\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Practice of A B C D word.\\\"}]}]}\",\r\n            \"assetId\": \"{{homeWorkDataID}}\",\r\n            \"type\": \"image\"\r\n          },\r\n          \"assetId\": \"{{homeWorkDataID}}\",\r\n          \"assetApproved\": true,\r\n          \"type\": \"image\"\r\n        },\r\n        \"question_answer\": {\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Here you can find the homework answered file.\\\"}]}]}\",\r\n            \"assetId\": \"{{hmQueAnsDataID}}\",\r\n            \"type\": \"image\"\r\n          },\r\n          \"assetId\": \"{{hmQueAnsDataID}}\",\r\n          \"type\": \"image\",\r\n          \"assetApproved\": true\r\n        },\r\n        \"description\": \"1\"\r\n      },\r\n      \"differentiation_tips\": {\r\n        \"need_more_help\": {\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the AB word Description.\\\"}]}]}\"\r\n        },\r\n        \"need_extra_challenge\": {\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the extra challenge description\\\"}]}]}\"\r\n        }\r\n      },\r\n      \"types\": [\r\n        \"individual\"\r\n      ],\r\n      \"summary\": \"\",\r\n      \"time\": \"10 mins\",\r\n      \"type\": \"\",\r\n      \"more_practice\": [],\r\n      \"more_practice_time\": \"7 mins\",\r\n      \"teacher_tip\": \"\",\r\n      \"summaryData\": {\r\n        \"classwork\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a Classwork\\\"}]}]}\",\r\n        \"homework\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is a homework\\\"}]}]}\"\r\n      }\r\n    },\r\n    \"assessment\": {\r\n      \"grade_template\": {\r\n        \"approaching\": {\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the approach\\\"}]}]}\"\r\n        },\r\n        \"meeting\": {\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"For Meeting\\\"}]}]}\"\r\n        },\r\n        \"exceeding\": {\r\n          \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"For Exceeding\\\"}]}]}\"\r\n        },\r\n        \"overall\": {\r\n          \"description\": \"\"\r\n        }\r\n      },\r\n      \"check\": {\r\n        \"question\": {\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Practice of A B C D word.\\\"}]}]}\",\r\n            \"assetId\": \"{{classWorkDataID}}\",\r\n            \"type\": \"image\"\r\n          },\r\n          \"assetId\": \"{{classWorkDataID}}\",\r\n          \"assetApproved\": true,\r\n          \"type\": \"image\"\r\n        },\r\n        \"question_answer\": {\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the worksheet answered file\\\"}]}]}\",\r\n            \"assetId\": \"{{cwQueAnsDataID}}\",\r\n            \"type\": \"image\"\r\n          },\r\n          \"assetId\": \"{{cwQueAnsDataID}}\",\r\n          \"type\": \"image\",\r\n          \"assetApproved\": true\r\n        },\r\n        \"description\": \"1\"\r\n      },\r\n      \"summary\": \"\",\r\n      \"teacher_tip\": \"\",\r\n      \"summaryData\": {\r\n        \"approaching\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is assessment approaching\\\"}]}]}\",\r\n        \"meeting\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is for Meeting\\\"}]}]}\",\r\n        \"exceeding\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is for Exceeding\\\"}]}]}\"\r\n      }\r\n    },\r\n    \"references\": [\r\n      \"Ref -1\"\r\n    ],\r\n    \"_id\": \"6139acaa84bde30011c9a758\",\r\n    \"assetId\": \"{{coverImageDataId}}\",\r\n    \"brief\": {\r\n      \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the cover image.\\\"}]}]}\",\r\n      \"assetId\": \"{{coverImageDataId}}\"\r\n    },\r\n    \"time\": \"35 mins\",\r\n    \"keywords\": [\r\n      {\r\n        \"_id\": \"6139acaa84bde30011c9a759\",\r\n        \"keyword\": \"This is 1 keyword\",\r\n        \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is 1st keyword definition\\\"}]}]}\"\r\n      },\r\n      {\r\n        \"keyword\": \"This is 2 keyword\",\r\n        \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is 2nd keyword definition\\\"}]}]}\"\r\n      }\r\n    ],\r\n    \"aim\": {\r\n      \"summary\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an Aim Summary\\\"}]}]}\",\r\n      \"description\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is an Aim description.\\\"}]}]}\",\r\n      \"resources\": [\r\n        {\r\n          \"_id\": \"6139acaa84bde30011c9a75a\",\r\n          \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Word Book\\\"}]}]}\",\r\n          \"assetId\": \"{{contentBookDataId}}\",\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is resource image\\\"}]}]}\",\r\n            \"assetId\": \"{{contentBookDataId}}\"\r\n          },\r\n          \"assetApproved\": true\r\n        },\r\n        {\r\n          \"brief\": {\r\n            \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"This is the worksheet..\\\"}]}]}\",\r\n            \"assetId\": \"{{workSheetDataId}}\"\r\n          },\r\n          \"assetId\": \"{{workSheetDataId}}\",\r\n          \"assetApproved\": true,\r\n          \"text\": \"{\\\"type\\\":\\\"doc\\\",\\\"content\\\":[{\\\"type\\\":\\\"paragraph\\\",\\\"content\\\":[{\\\"type\\\":\\\"text\\\",\\\"text\\\":\\\"Worksheet\\\"}]}]}\"\r\n        }\r\n      ],\r\n      \"teacher_tip\": \"\"\r\n    },\r\n    \"lp_title\": \"{{lpName}}\",\r\n    \"lp_description\": \"{{desc}}\",\r\n    \"assetApproved\": true\r\n  },\r\n  \"equationEditorJsonArray\": []\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"    pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Save ProjectLP Validation..\",()=>{\r",
									"    pm.expect(jsonData.data.validateProjectLessonPlanStageData.status).to.eql(\"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  validateProjectLessonPlanStageData(projectId: \"{{createdProjectId}}\", contentLibraryId: {{createdLpId}}) {\r\n    status\r\n        errors {\r\n            path\r\n            errorMessage\r\n        }\r\n    }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Move Project To Next Stage[Proofreading]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Move Project To Next Stage [ProofReaading]..\",()=>{\r",
									"    pm.expect(jsonData.data.moveProjectLessonPlanToNextStage.currentStage).to.eql(\"Done\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  moveProjectLessonPlanToNextStage(projectId: \"{{createdProjectId}}\", contentLibraryId: {{createdLpId}}) {\r\n    currentStage\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"    var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify  Validation again..\",()=>{\r",
									"    pm.expect(jsonData.data.validateProjectLessonPlanStageData.status).to.eql(\"success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  validateProjectLessonPlanStageData(projectId: \"{{createdProjectId}}\", contentLibraryId: {{createdLpId}}) {\r\n    status\r\n    errors {\r\n      path\r\n      errorMessage\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Move Project to Next Stage[Completed]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Move Project To Next Stage [Completed]..\",()=>{\r",
									"    pm.expect(jsonData.data.moveProjectLessonPlanToNextStage.currentStage).to.eql(\"Done\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  moveProjectLessonPlanToNextStage(projectId: \"{{createdProjectId}}\", contentLibraryId: {{createdLpId}}) {\r\n    currentStage\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Project For STA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Publish project..\",()=>{\r",
									"    pm.expect(jsonData.data.publishProjectLpsToTeacherReadinessApp.triggerStatus.toString()).to.eql(\"true\");\r",
									"});\r",
									"\r",
									"setTimeout(() => {console.log(pm.environment.get(\"lpName\"))},  10000);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cesToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  publishProjectLpsToTeacherReadinessApp(projectId: \"{{createdProjectId}}\") {\r\n    triggerStatus\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-gateway.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-gateway",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "STA",
			"item": [
				{
					"name": "Generate OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"verifyToken\",jsonData.data.verificationToken);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Generate OTP\",()=>{\r",
									"    pm.expect(jsonData.message).to.eql(\"OTP sent successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mobile\": \"9600730927\",\r\n  \"countryCode\": \"91\",\r\n  \"isWhatsAppNotificationEnabled\": true,\r\n  \"email\": \"\",\r\n  \"sourceApp\": \"XSEED_SUPER_TEACHER\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://accounts-api.xseeddigital.info/api/v2/generate_otp",
							"protocol": "https",
							"host": [
								"accounts-api",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"v2",
								"generate_otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accessToken\", jsonData.data.accessToken);\r",
									"\r",
									"var licenseCode=jsonData.data.user.licenseCode;\r",
									"pm.environment.set(\"licenseCode\", licenseCode);\r",
									"pm.environment.set(\"userId\",jsonData.data.user.id);\r",
									"pm.environment.set(\"userName\",jsonData.data.user.name);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify OTP \",()=>{\r",
									"    pm.expect(jsonData.message).to.eql(\"Everything seems to be working fine!\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "user_platform",
								"value": "web",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mobile\": \"9600730927\",\r\n  \"otp\": \"5555\",\r\n  \"verificationToken\": \"{{verifyToken}}\",\r\n  \"isWhatsAppNotificationEnabled\": true,\r\n  \"platform\": \"web\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://accounts-api.xseeddigital.info/api/v2/verify_otp",
							"protocol": "https",
							"host": [
								"accounts-api",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"v2",
								"verify_otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Time Zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Updating User Time Zone \",()=>{\r",
									"    pm.expect(jsonData.message).to.eql(\"Successfully updated the timezone!\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "xs-auth-token",
								"value": "{{accessToken}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "https://sta-web.xseeddigital.info",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "https://sta-web.xseeddigital.info",
								"type": "text"
							},
							{
								"key": "license-code",
								"value": "{{licenseCode}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"timezone\": \"GMT+5.5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://accounts-api.xseeddigital.info/api/updateUserTimezone",
							"protocol": "https",
							"host": [
								"accounts-api",
								"xseeddigital",
								"info"
							],
							"path": [
								"api",
								"updateUserTimezone"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify logged in user details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify Logged In User Name\",()=>{\r",
									"   pm.expect(jsonData.data.loggedInUser.caaUser.name).to.eql(pm.environment.get(\"userName\"));   \r",
									"});\r",
									"\r",
									"pm.test(\"verify Logged In User Mobile Number\",()=>{\r",
									"   pm.expect(jsonData.data.loggedInUser.caaUser.mobile).to.eql(\"9600730927\");   \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  __typename\r\n  loggedInUser {\r\n    __typename\r\n    auto_play_status\r\n    currentlySelectedLicense {\r\n      __typename\r\n      licenseCode\r\n      expiringAt\r\n      isTrial\r\n      isActive\r\n      isExpired\r\n      isDeactivated\r\n      isRetail\r\n      isCurrentlySelected\r\n      maximumAllotments\r\n    }\r\n    allotmentsV2 {\r\n      __typename\r\n      globalProductId\r\n      globalBoardId\r\n      standard {\r\n        __typename\r\n        id\r\n        name\r\n        isEarlyProgramStandard\r\n        displayName\r\n      }\r\n      subject {\r\n        __typename\r\n        id\r\n        name\r\n        shortName\r\n      }\r\n      recentLessonPlans {\r\n        __typename\r\n        id\r\n        name\r\n        blockTitle\r\n        blockSequence\r\n        blockDisplaySequence\r\n        displaySequence\r\n        sequence\r\n        bId\r\n        status\r\n        image_url\r\n        asset\r\n      }\r\n    }\r\n    caaUser {\r\n      __typename\r\n      caaUserId\r\n      name\r\n      gender\r\n      mobile\r\n      countryCode\r\n      email\r\n    }\r\n    selectedAccent\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Block Map Meta Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($productId: ID!, $boardId: ID!, $subjectId: ID!, $standardId: ID!) {\r\n  __typename\r\n  blockMapMetaData(productId: $productId, boardId: $boardId, subjectId: $subjectId, standardId: $standardId)\r\n}",
								"variables": "{\r\n  \"productId\": {{productID}},\r\n  \"boardId\": {{boardID}},\r\n  \"subjectId\": {{subjectID}},\r\n  \"standardId\": {{standardID}}\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lesson Plan V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"const lessonPlanLength=jsonData.data.lessonPlansV2.length;\r",
									"for(var i=0;i<lessonPlanLength;i++)\r",
									"{\r",
									"    if((jsonData.data.lessonPlansV2[i].name)==(pm.environment.get(\"lpName\")))\r",
									"    {\r",
									"        pm.environment.set(\"lessonPlanId\",jsonData.data.lessonPlansV2[i].id);\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($productId: Int!, $boardId: Int!, $subjectId: Int!, $standardId: Int!) {\r\n  __typename\r\n  lessonPlansV2(productId: $productId, boardId: $boardId, subjectId: $subjectId, standardId: $standardId) {\r\n    __typename\r\n    id\r\n    name\r\n    linkedName\r\n    lpType\r\n    description\r\n    image_url\r\n    bId\r\n    sequence\r\n    displaySequence\r\n    blockSequence\r\n    blockDisplaySequence\r\n    status\r\n    blockTitle\r\n    isEnabled\r\n    isEnabledStatus\r\n    asset\r\n  }\r\n  \r\n}",
								"variables": "{\r\n  \"productId\": {{productID}},\r\n  \"boardId\": {{boardID}},\r\n  \"subjectId\": {{subjectID}},\r\n  \"standardId\": {{standardID}}\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lesson Plan Meta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify lesson plan meta\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($productId: ID!, $boardId: ID!, $subjectId: ID!, $standardId: ID!, $lessonPlanId: ID!) {\r\n  __typename\r\n  lessonPlanMetaData(productId: $productId, boardId: $boardId, subjectId: $subjectId, standardId: $standardId, lessonPlanId: $lessonPlanId)\r\n}",
								"variables": "{\r\n  \"productId\": {{productID}},\r\n  \"boardId\": {{boardID}},\r\n  \"subjectId\": {{subjectID}},\r\n  \"standardId\": {{standardID}},\r\n  \"lessonPlanId\": \"{{lessonPlanId}}\"\r\n}\r\n"
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lesson Plan Meta info and Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"verify 200 status code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan 1st Title\",()=>{\r",
									"    var desc=jsonData.data.getLessonPlanData.data.data.analysis.activity_discussion.explanations[0].description;\r",
									"    pm.expect(desc).contains(\"This is 1st Title\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan 2nd Title\",()=>{\r",
									"    var actDesc=jsonData.data.getLessonPlanData.data.data.analysis.activity_discussion.explanations[0].description;\r",
									"    pm.expect(actDesc).contains(\"This is 1st Title\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan 2nd Title\",()=>{\r",
									"    var expDesc=jsonData.data.getLessonPlanData.data.data.analysis.generalized_discussion.explanations[0].description;\r",
									"    pm.expect(expDesc).contains(\"This is the 2nd Title\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan Home Work \",()=>{\r",
									"    var getHomeWork=jsonData.data.getLessonPlanData.data.data.application.summaryData.homework;\r",
									"    pm.expect(getHomeWork).contains(\"This is a homework\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan Class Work \",()=>{\r",
									"    var getClassWork=jsonData.data.getLessonPlanData.data.data.application.summaryData.classwork;\r",
									"    pm.expect(getClassWork).contains(\"This is a Classwork\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify get lesson plan Teacher Tip \",()=>{\r",
									"    var getTeacherTip=jsonData.data.getLessonPlanData.data.data.analysis.activity_discussion.teacher_tip;\r",
									"    pm.expect(getTeacherTip).contains(\"This is Teacher Tip\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($lessonPlanId: String!) {\r\n  __typename\r\n  getLessonPlanData(lessonPlanId: $lessonPlanId) {\r\n    __typename\r\n    data\r\n  }\r\n}",
								"variables": "{\r\n  \"lessonPlanId\": \"{{lessonPlanId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lesson Plan Usage Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=JSON.parse(responseBody);\r",
									"pm.test(\"Verify 200 Status Code\",()=>{\r",
									"    pm.response.to.be.ok;\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  __typename\r\n  getLessonPlanUsageData(lessonPlanId: \"{{lessonPlanId}}\", standardId: \"{{standardId}}\", subjectId: \"{{subjectId}}\") {\r\n    __typename\r\n    id\r\n    rating\r\n    status {\r\n      __typename\r\n      value\r\n      updatedAt\r\n    }\r\n    resources\r\n    notes {\r\n      __typename\r\n      aim {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n      action {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n      analysis {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n      application {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n      assessment {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n      informationAndAssessment {\r\n        __typename\r\n        text\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "https://xseed-super-teacher-backend.xseeddigital.info/graphql",
							"protocol": "https",
							"host": [
								"xseed-super-teacher-backend",
								"xseeddigital",
								"info"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}